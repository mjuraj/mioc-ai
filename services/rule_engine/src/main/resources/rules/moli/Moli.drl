package rules.moli;

import java.util.List;

import com.mindsmiths.ruleEngine.model.Heartbeat
import com.mindsmiths.armory.event.UserConnected
import com.mindsmiths.armory.event.Submit
import com.mindsmiths.ruleEngine.util.Log
import com.mindsmiths.ruleEngine.model.Initialize
import com.mindsmiths.gpt3.completion.GPT3Completion
import com.mindsmiths.sdk.utils.Utils

import agents.Moli;
import signals.AddReview;
import signals.NewEmailEntry;


rule "Send initial email"
    when
        signal: Initialize() from entry-point "signals"
        agent: Moli(hasConnection("email"), lastSurveyEmailSent == null)
    then
        agent.sendEmail(List.of(agent.getConnection("email")), "Upoznaj Miočanskog AI asistenta", agent.getIntroEmailText());
        modify(agent) { 
            setLastSurveyEmailSent(Utils.now()),
            setReminderSent(false)
        }
        delete(signal);
end

rule "Remind user to fill in the survey"
    when
        signal: Heartbeat(ts: timestamp) from entry-point "signals"
        agent: Moli(reminderSent == false,
                    age == null,
                    lastSurveyEmailSent before[72h] ts)
    then
        modify(agent) { setReminderSent(true) }
        agent.sendEmail(List.of(agent.getConnection("email")), "Ispuni anketu", agent.getIntroEmailText());
        delete(signal);
end

rule "Send a new survey email after 3 months"
    when
        signal: Heartbeat(ts: timestamp) from entry-point "signals"
        agent: Moli(reminderSent == true,
                    lastSurveyEmailSent before[90d] ts)
    then
        agent.sendEmail(List.of(agent.getConnection("email")), "Upoznaj Miočanskog AI asistenta", agent.getIntroEmailText());
        modify(agent) { 
            setLastSurveyEmailSent(Utils.now()),
            setReminderSent(false)
        }
end

rule "Hello world"
    when
        signal: UserConnected() from entry-point "signals"
        agent: Moli(!hasConnection("email"))
    then
        agent.showOnboardingScreen();
        delete(signal);
end

rule "Onboarding email received"
    when
        signal: Submit(buttonId == "emailSubmit", screenId == "askForEmail") from entry-point "signals"
        agent: Moli()
    then
        String email = signal.getParamAsString("email");
        agent.send("SMITH", new NewEmailEntry(email));
        delete(signal);
end

rule "Hello kind user"
    when
        signal: UserConnected() from entry-point "signals"
        agent: Moli(response != null, response != "")
    then
        agent.showHelloScreen();
        delete(signal);
end

// User clicked on "Miočanin" on screen "askForGender"
rule "Male gender"
    when
        signal: Submit(buttonId == "askForGenderStartedm", screenId == "askForGender") from entry-point "signals"
        agent: Moli()
    then
        modify(agent) {
            setGender("M")
        };
        delete(signal);
end

// User clicked on "Miočanka" on screen "askForGender"
rule "Female gender"
    when
        signal: Submit(buttonId == "askForGenderStartedf", screenId == "askForGender") from entry-point "signals"
        agent: Moli()
    then
        modify(agent) {
            setGender("F")
        };
        delete(signal);
end

// User clicked on "Prvi" on screen "askForAge"
rule "1st year"
    when
        signal: Submit(buttonId == "askForAgeStarted1", screenId == "askForAge") from entry-point "signals"
        agent: Moli()
    then
        modify(agent) {
            setAge(1)
        };
        delete(signal);
end

// User clicked on "Drugi" on screen "askForAge"
rule "2nd year"
    when
        signal: Submit(buttonId == "askForAgeStarted2", screenId == "askForAge") from entry-point "signals"
        agent: Moli()
    then
        modify(agent) {
            setAge(2)
        };
        delete(signal);
end

// User clicked on "Treći" on screen "askForAge"
rule "3rd year"
    when
        signal: Submit(buttonId == "askForAgeStarted3", screenId == "askForAge") from entry-point "signals"
        agent: Moli()
    then
        modify(agent) {
            setAge(3)
        };
        delete(signal);
end

// User clicked on "Četvrti" on screen "askForAge"
rule "4th year"
    when
        signal: Submit(buttonId == "askForAgeStarted4", screenId == "askForAge") from entry-point "signals"
        agent: Moli()
    then
        modify(agent) {
            setAge(4)
        };
        delete(signal);
end

// User selected rating on screen "askForRating"
rule "Rating"
    when
        signal: Submit(screenId == "askForRating") from entry-point "signals"
        agent: Moli()
    then
        modify(agent) {
            setRating((Integer) signal.getParam("nps"))
        };
        delete(signal)
end

// User inputted feedback on screen "askForFeedback"
rule "Feedback"
    when
        signal: Submit(textareaInput: getParamAsString("feedback"), screenId == "askForFeedback") from entry-point "signals"
        agent: Moli()
    then
        String feedback = signal.getParamAsString("feedback");
        if(feedback == null)
            feedback = "";
            
        modify(agent) {
            setFeedback(feedback)
        };
        agent.send("SMITH", new AddReview(agent.getConnection("email"), agent.getGender(), agent.getAge(), agent.getRating(), agent.getFeedback(), Utils.now()));
        delete(signal);
end

// User switched to "askForFeedback" screen
rule "Ask GPT3 response"
    salience 10
    when
        agent: Moli(response == null, hasConnection("email"))
    then
        modify(agent) { setResponse("") };
        agent.askGPT3();
end

rule "Store response"
    when
        gpt3Result: GPT3Completion() from entry-point "signals"
        agent: Moli()
    then
        modify(agent) {setResponse(gpt3Result.getBestResponse())};
        delete(gpt3Result);
end
